#ifndef TASKCOMMANDS_H
#define TASKCOMMANDS_H

#include "taskcommand.h"

class SimpleCommand : public TaskCommand
{
public:

    typedef void (Task::*action)();

     SimpleCommand(Task* _task, action _act) : TaskCommand(_task), act(_act){}

    void execute()
    {
        (this->task->*act)();
    }

private:

    action act;
};


class TransformCommand : public TaskCommand
{
public:

    typedef void (Task::*action)(ModifiyType, double);

     TransformCommand(Task* task, action _act, ModifiyType _type, double _delta)
         : TaskCommand(task), act(_act), type(_type), delta(_delta) {}

    void execute()
    {
        (this->task->*act)(this->type, this->delta);
    }

private:

    action act;
    ModifiyType type;
    double delta;
};


class LoadCommand : public TaskCommand
{
public:

    typedef void (Task::*action)(const char*);

    LoadCommand(Task* _task, action _act, const char* _name) :
        TaskCommand(_task), act(_act), name(_name){}

    void execute()
    {
        (this->task->*act)(this->name);
    }

private:

    const char* name;
    action act;
};

class CameraCommand : public TaskCommand
{
public:

    typedef void (Task::*action)(Camera&);

    CameraCommand(Task* _task, action _act, Camera& cam) :
        TaskCommand(_task), act(_act), camera(cam){}

    void execute()
    {
        (this->task->*act)(this->camera);
    }

private:

    Camera &camera;
    action act;
};


class CanvasCommand : public TaskCommand
{
public:

    typedef void (Task::*action)(CanvasStruct& );

    CanvasCommand(Task* _task, action _act, CanvasStruct&  can) :
        TaskCommand(_task), act(_act), canvas(can){}

    void execute()
    {
        (this->task->*act)(this->canvas);
    }

private:

    CanvasStruct& canvas;
    action act;
};
#endif // TASKCOMMANDS_H
